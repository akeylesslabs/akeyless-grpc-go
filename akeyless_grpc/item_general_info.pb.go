//
//Akeyless API
//
//The purpose of this application is to provide access to Akeyless API.
//
//The version of the OpenAPI document: 2.0
//
//Contact: support@akeyless.io
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.24.4
// source: models/item_general_info.proto

package akeyless_grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ItemGeneralInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertIssueDetails             *CertificateIssueInfo      `protobuf:"bytes,207496705,opt,name=cert_issue_details,proto3" json:"cert_issue_details,omitempty"`
	CertificateChainInfo         *CertificateChainInfo      `protobuf:"bytes,201697517,opt,name=certificate_chain_info,proto3" json:"certificate_chain_info,omitempty"`
	CertificatesTemplateInfo     *CertificateTemplateInfo   `protobuf:"bytes,62973939,opt,name=certificates_template_info,proto3" json:"certificates_template_info,omitempty"`
	ClassicKeyDetails            *ClassicKeyDetailsInfo     `protobuf:"bytes,247772213,opt,name=classic_key_details,proto3" json:"classic_key_details,omitempty"`
	ClusterGwUrl                 string                     `protobuf:"bytes,158508934,opt,name=cluster_gw_url,proto3" json:"cluster_gw_url,omitempty"`
	DisplayMetadata              string                     `protobuf:"bytes,221229557,opt,name=display_metadata,proto3" json:"display_metadata,omitempty"`
	DynamicSecretProducerDetails *DynamicSecretProducerInfo `protobuf:"bytes,301488196,opt,name=dynamic_secret_producer_details,proto3" json:"dynamic_secret_producer_details,omitempty"`
	ImporterInfo                 *ImporterInfo              `protobuf:"bytes,376238661,opt,name=importer_info,proto3" json:"importer_info,omitempty"`
	OidcClientInfo               *OidcClientInfo            `protobuf:"bytes,250004164,opt,name=oidc_client_info,proto3" json:"oidc_client_info,omitempty"`
	PasswordPolicy               *PasswordPolicyInfo        `protobuf:"bytes,500903084,opt,name=password_policy,proto3" json:"password_policy,omitempty"`
	RotatedSecretDetails         *RotatedSecretDetailsInfo  `protobuf:"bytes,326363063,opt,name=rotated_secret_details,proto3" json:"rotated_secret_details,omitempty"`
	SecureRemoteAccessDetails    *SecureRemoteAccess        `protobuf:"bytes,262183753,opt,name=secure_remote_access_details,proto3" json:"secure_remote_access_details,omitempty"`
	StaticSecretInfo             *StaticSecretDetailsInfo   `protobuf:"bytes,208172174,opt,name=static_secret_info,proto3" json:"static_secret_info,omitempty"`
	TokenizerInfo                *TokenizerInfo             `protobuf:"bytes,394048300,opt,name=tokenizer_info,proto3" json:"tokenizer_info,omitempty"`
}

func (x *ItemGeneralInfo) Reset() {
	*x = ItemGeneralInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_item_general_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemGeneralInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemGeneralInfo) ProtoMessage() {}

func (x *ItemGeneralInfo) ProtoReflect() protoreflect.Message {
	mi := &file_models_item_general_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemGeneralInfo.ProtoReflect.Descriptor instead.
func (*ItemGeneralInfo) Descriptor() ([]byte, []int) {
	return file_models_item_general_info_proto_rawDescGZIP(), []int{0}
}

func (x *ItemGeneralInfo) GetCertIssueDetails() *CertificateIssueInfo {
	if x != nil {
		return x.CertIssueDetails
	}
	return nil
}

func (x *ItemGeneralInfo) GetCertificateChainInfo() *CertificateChainInfo {
	if x != nil {
		return x.CertificateChainInfo
	}
	return nil
}

func (x *ItemGeneralInfo) GetCertificatesTemplateInfo() *CertificateTemplateInfo {
	if x != nil {
		return x.CertificatesTemplateInfo
	}
	return nil
}

func (x *ItemGeneralInfo) GetClassicKeyDetails() *ClassicKeyDetailsInfo {
	if x != nil {
		return x.ClassicKeyDetails
	}
	return nil
}

func (x *ItemGeneralInfo) GetClusterGwUrl() string {
	if x != nil {
		return x.ClusterGwUrl
	}
	return ""
}

func (x *ItemGeneralInfo) GetDisplayMetadata() string {
	if x != nil {
		return x.DisplayMetadata
	}
	return ""
}

func (x *ItemGeneralInfo) GetDynamicSecretProducerDetails() *DynamicSecretProducerInfo {
	if x != nil {
		return x.DynamicSecretProducerDetails
	}
	return nil
}

func (x *ItemGeneralInfo) GetImporterInfo() *ImporterInfo {
	if x != nil {
		return x.ImporterInfo
	}
	return nil
}

func (x *ItemGeneralInfo) GetOidcClientInfo() *OidcClientInfo {
	if x != nil {
		return x.OidcClientInfo
	}
	return nil
}

func (x *ItemGeneralInfo) GetPasswordPolicy() *PasswordPolicyInfo {
	if x != nil {
		return x.PasswordPolicy
	}
	return nil
}

func (x *ItemGeneralInfo) GetRotatedSecretDetails() *RotatedSecretDetailsInfo {
	if x != nil {
		return x.RotatedSecretDetails
	}
	return nil
}

func (x *ItemGeneralInfo) GetSecureRemoteAccessDetails() *SecureRemoteAccess {
	if x != nil {
		return x.SecureRemoteAccessDetails
	}
	return nil
}

func (x *ItemGeneralInfo) GetStaticSecretInfo() *StaticSecretDetailsInfo {
	if x != nil {
		return x.StaticSecretInfo
	}
	return nil
}

func (x *ItemGeneralInfo) GetTokenizerInfo() *TokenizerInfo {
	if x != nil {
		return x.TokenizerInfo
	}
	return nil
}

var File_models_item_general_info_proto protoreflect.FileDescriptor

var file_models_item_general_info_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x1a,
	0x1a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x23, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xbb, 0x09, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x81, 0xcc, 0xf8, 0x62, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x16,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xed, 0xd1, 0x96, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x69, 0x0a, 0x1a,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xf3, 0xcf, 0x83, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1a, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a, 0x13, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0xb5,
	0xe8, 0x92, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x77,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x86, 0xcf, 0xca, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x2d, 0x0a,
	0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0xf5, 0xe3, 0xbe, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x76, 0x0a, 0x1f,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0xc4, 0xb0, 0xe1, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6b, 0x65, 0x79,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x1f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc5, 0xe4, 0xb3, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x10, 0x6f,
	0x69, 0x64, 0x63, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0xc4, 0x85, 0x9b, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x69, 0x64, 0x63, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x0f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xac, 0xd9, 0xec,
	0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x63, 0x0a, 0x16, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0xb7, 0xcf, 0xcf, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x68, 0x0a, 0x1c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0xc9, 0xb6, 0x82, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x1c, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x59, 0x0a, 0x12, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x8e, 0xe9, 0xa1, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xac, 0xe6, 0xf2, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x51,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x50, 0x01, 0x5a, 0x0f, 0x2e, 0x3b, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0xaa, 0x02, 0x0d, 0x41, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73,
	0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0xca, 0x02, 0x0d, 0x41, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73,
	0x73, 0x5c, 0x67, 0x52, 0x50, 0x43, 0xe2, 0x02, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x50, 0x00, 0x50, 0x01, 0x50, 0x02, 0x50, 0x03, 0x50, 0x04, 0x50, 0x05, 0x50, 0x06, 0x50,
	0x07, 0x50, 0x08, 0x50, 0x09, 0x50, 0x0a, 0x50, 0x0b, 0x50, 0x0c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_models_item_general_info_proto_rawDescOnce sync.Once
	file_models_item_general_info_proto_rawDescData = file_models_item_general_info_proto_rawDesc
)

func file_models_item_general_info_proto_rawDescGZIP() []byte {
	file_models_item_general_info_proto_rawDescOnce.Do(func() {
		file_models_item_general_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_models_item_general_info_proto_rawDescData)
	})
	return file_models_item_general_info_proto_rawDescData
}

var file_models_item_general_info_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_models_item_general_info_proto_goTypes = []any{
	(*ItemGeneralInfo)(nil),           // 0: akeyless_grpc.ItemGeneralInfo
	(*CertificateIssueInfo)(nil),      // 1: akeyless_grpc.CertificateIssueInfo
	(*CertificateChainInfo)(nil),      // 2: akeyless_grpc.CertificateChainInfo
	(*CertificateTemplateInfo)(nil),   // 3: akeyless_grpc.CertificateTemplateInfo
	(*ClassicKeyDetailsInfo)(nil),     // 4: akeyless_grpc.ClassicKeyDetailsInfo
	(*DynamicSecretProducerInfo)(nil), // 5: akeyless_grpc.DynamicSecretProducerInfo
	(*ImporterInfo)(nil),              // 6: akeyless_grpc.ImporterInfo
	(*OidcClientInfo)(nil),            // 7: akeyless_grpc.OidcClientInfo
	(*PasswordPolicyInfo)(nil),        // 8: akeyless_grpc.PasswordPolicyInfo
	(*RotatedSecretDetailsInfo)(nil),  // 9: akeyless_grpc.RotatedSecretDetailsInfo
	(*SecureRemoteAccess)(nil),        // 10: akeyless_grpc.SecureRemoteAccess
	(*StaticSecretDetailsInfo)(nil),   // 11: akeyless_grpc.StaticSecretDetailsInfo
	(*TokenizerInfo)(nil),             // 12: akeyless_grpc.TokenizerInfo
}
var file_models_item_general_info_proto_depIdxs = []int32{
	1,  // 0: akeyless_grpc.ItemGeneralInfo.cert_issue_details:type_name -> akeyless_grpc.CertificateIssueInfo
	2,  // 1: akeyless_grpc.ItemGeneralInfo.certificate_chain_info:type_name -> akeyless_grpc.CertificateChainInfo
	3,  // 2: akeyless_grpc.ItemGeneralInfo.certificates_template_info:type_name -> akeyless_grpc.CertificateTemplateInfo
	4,  // 3: akeyless_grpc.ItemGeneralInfo.classic_key_details:type_name -> akeyless_grpc.ClassicKeyDetailsInfo
	5,  // 4: akeyless_grpc.ItemGeneralInfo.dynamic_secret_producer_details:type_name -> akeyless_grpc.DynamicSecretProducerInfo
	6,  // 5: akeyless_grpc.ItemGeneralInfo.importer_info:type_name -> akeyless_grpc.ImporterInfo
	7,  // 6: akeyless_grpc.ItemGeneralInfo.oidc_client_info:type_name -> akeyless_grpc.OidcClientInfo
	8,  // 7: akeyless_grpc.ItemGeneralInfo.password_policy:type_name -> akeyless_grpc.PasswordPolicyInfo
	9,  // 8: akeyless_grpc.ItemGeneralInfo.rotated_secret_details:type_name -> akeyless_grpc.RotatedSecretDetailsInfo
	10, // 9: akeyless_grpc.ItemGeneralInfo.secure_remote_access_details:type_name -> akeyless_grpc.SecureRemoteAccess
	11, // 10: akeyless_grpc.ItemGeneralInfo.static_secret_info:type_name -> akeyless_grpc.StaticSecretDetailsInfo
	12, // 11: akeyless_grpc.ItemGeneralInfo.tokenizer_info:type_name -> akeyless_grpc.TokenizerInfo
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_models_item_general_info_proto_init() }
func file_models_item_general_info_proto_init() {
	if File_models_item_general_info_proto != nil {
		return
	}
	file_models_special_types_proto_init()
	file_models_certificate_chain_info_proto_init()
	file_models_certificate_issue_info_proto_init()
	file_models_certificate_template_info_proto_init()
	file_models_classic_key_details_info_proto_init()
	file_models_dynamic_secret_producer_info_proto_init()
	file_models_importer_info_proto_init()
	file_models_oidc_client_info_proto_init()
	file_models_password_policy_info_proto_init()
	file_models_rotated_secret_details_info_proto_init()
	file_models_secure_remote_access_proto_init()
	file_models_static_secret_details_info_proto_init()
	file_models_tokenizer_info_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_models_item_general_info_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ItemGeneralInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_models_item_general_info_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_models_item_general_info_proto_goTypes,
		DependencyIndexes: file_models_item_general_info_proto_depIdxs,
		MessageInfos:      file_models_item_general_info_proto_msgTypes,
	}.Build()
	File_models_item_general_info_proto = out.File
	file_models_item_general_info_proto_rawDesc = nil
	file_models_item_general_info_proto_goTypes = nil
	file_models_item_general_info_proto_depIdxs = nil
}
