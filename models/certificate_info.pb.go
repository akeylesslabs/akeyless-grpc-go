//
//Akeyless API
//
//The purpose of this application is to provide access to Akeyless API.
//
//The version of the OpenAPI document: 2.0
//
//Contact: support@akeyless.io
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.24.4
// source: models/certificate_info.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CertificateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtKeyUsage []int64 `protobuf:"varint,197199965,rep,packed,name=ext_key_usage,json=ExtKeyUsage,proto3" json:"ext_key_usage,omitempty"`
	// KeyUsage represents the set of actions that are valid for a given key. It's a bitmap of the KeyUsage* constants.
	KeyUsage               int64        `protobuf:"varint,19625635,opt,name=key_usage,json=KeyUsage,proto3" json:"key_usage,omitempty"`
	CrlDistributionPoints  []string     `protobuf:"bytes,30610022,rep,name=crl_distribution_points,proto3" json:"crl_distribution_points,omitempty"`
	DnsNames               []string     `protobuf:"bytes,113148750,rep,name=dns_names,proto3" json:"dns_names,omitempty"`
	EmailAddresses         []string     `protobuf:"bytes,228659522,rep,name=email_addresses,proto3" json:"email_addresses,omitempty"`
	Extensions             []*Extension `protobuf:"bytes,198808559,rep,name=extensions,proto3" json:"extensions,omitempty"`
	IpAddresses            []string     `protobuf:"bytes,122453643,rep,name=ip_addresses,proto3" json:"ip_addresses,omitempty"`
	IsCa                   bool         `protobuf:"varint,100490131,opt,name=is_ca,proto3" json:"is_ca,omitempty"`
	Issuer                 *Name        `protobuf:"bytes,105418057,opt,name=issuer,proto3" json:"issuer,omitempty"`
	IssuingCertificateUrl  []string     `protobuf:"bytes,108425183,rep,name=issuing_certificate_url,proto3" json:"issuing_certificate_url,omitempty"`
	KeySize                int64        `protobuf:"varint,501095905,opt,name=key_size,proto3" json:"key_size,omitempty"`
	NotAfter               string       `protobuf:"bytes,26995,opt,name=not_after,proto3" json:"not_after,omitempty"`
	NotBefore              string       `protobuf:"bytes,508735895,opt,name=not_before,proto3" json:"not_before,omitempty"`
	OcspServer             []string     `protobuf:"bytes,532419570,rep,name=ocsp_server,proto3" json:"ocsp_server,omitempty"`
	PublicKeyAlgorithmName string       `protobuf:"bytes,270494767,opt,name=public_key_algorithm_name,proto3" json:"public_key_algorithm_name,omitempty"`
	SerialNumber           string       `protobuf:"bytes,312410100,opt,name=serial_number,proto3" json:"serial_number,omitempty"`
	Sha_1Fingerprint       string       `protobuf:"bytes,318802045,opt,name=sha_1_fingerprint,proto3" json:"sha_1_fingerprint,omitempty"`
	Sha_256Fingerprint     string       `protobuf:"bytes,325165213,opt,name=sha_256_fingerprint,proto3" json:"sha_256_fingerprint,omitempty"`
	Signature              string       `protobuf:"bytes,536713401,opt,name=signature,proto3" json:"signature,omitempty"`
	SignatureAlgorithmName string       `protobuf:"bytes,14992702,opt,name=signature_algorithm_name,proto3" json:"signature_algorithm_name,omitempty"`
	Subject                *Name        `protobuf:"bytes,257272535,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectPublicKey       string       `protobuf:"bytes,32403582,opt,name=subject_public_key,proto3" json:"subject_public_key,omitempty"`
	Uris                   []string     `protobuf:"bytes,3598471,rep,name=uris,proto3" json:"uris,omitempty"`
	Version                int64        `protobuf:"varint,351608024,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *CertificateInfo) Reset() {
	*x = CertificateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_certificate_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateInfo) ProtoMessage() {}

func (x *CertificateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_models_certificate_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateInfo.ProtoReflect.Descriptor instead.
func (*CertificateInfo) Descriptor() ([]byte, []int) {
	return file_models_certificate_info_proto_rawDescGZIP(), []int{0}
}

func (x *CertificateInfo) GetExtKeyUsage() []int64 {
	if x != nil {
		return x.ExtKeyUsage
	}
	return nil
}

func (x *CertificateInfo) GetKeyUsage() int64 {
	if x != nil {
		return x.KeyUsage
	}
	return 0
}

func (x *CertificateInfo) GetCrlDistributionPoints() []string {
	if x != nil {
		return x.CrlDistributionPoints
	}
	return nil
}

func (x *CertificateInfo) GetDnsNames() []string {
	if x != nil {
		return x.DnsNames
	}
	return nil
}

func (x *CertificateInfo) GetEmailAddresses() []string {
	if x != nil {
		return x.EmailAddresses
	}
	return nil
}

func (x *CertificateInfo) GetExtensions() []*Extension {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *CertificateInfo) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *CertificateInfo) GetIsCa() bool {
	if x != nil {
		return x.IsCa
	}
	return false
}

func (x *CertificateInfo) GetIssuer() *Name {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *CertificateInfo) GetIssuingCertificateUrl() []string {
	if x != nil {
		return x.IssuingCertificateUrl
	}
	return nil
}

func (x *CertificateInfo) GetKeySize() int64 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

func (x *CertificateInfo) GetNotAfter() string {
	if x != nil {
		return x.NotAfter
	}
	return ""
}

func (x *CertificateInfo) GetNotBefore() string {
	if x != nil {
		return x.NotBefore
	}
	return ""
}

func (x *CertificateInfo) GetOcspServer() []string {
	if x != nil {
		return x.OcspServer
	}
	return nil
}

func (x *CertificateInfo) GetPublicKeyAlgorithmName() string {
	if x != nil {
		return x.PublicKeyAlgorithmName
	}
	return ""
}

func (x *CertificateInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *CertificateInfo) GetSha_1Fingerprint() string {
	if x != nil {
		return x.Sha_1Fingerprint
	}
	return ""
}

func (x *CertificateInfo) GetSha_256Fingerprint() string {
	if x != nil {
		return x.Sha_256Fingerprint
	}
	return ""
}

func (x *CertificateInfo) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *CertificateInfo) GetSignatureAlgorithmName() string {
	if x != nil {
		return x.SignatureAlgorithmName
	}
	return ""
}

func (x *CertificateInfo) GetSubject() *Name {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *CertificateInfo) GetSubjectPublicKey() string {
	if x != nil {
		return x.SubjectPublicKey
	}
	return ""
}

func (x *CertificateInfo) GetUris() []string {
	if x != nil {
		return x.Uris
	}
	return nil
}

func (x *CertificateInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

var File_models_certificate_info_proto protoreflect.FileDescriptor

var file_models_certificate_info_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x1a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x08, 0x0a, 0x0f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0d, 0x65, 0x78, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0xdd, 0x90, 0x84, 0x5e, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0b, 0x45, 0x78, 0x74, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0xa3, 0xed,
	0xad, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3b, 0x0a, 0x17, 0x63, 0x72, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0xe6, 0xa4, 0xcc, 0x0e,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x63, 0x72, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x09, 0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xce, 0x86, 0xfa, 0x35, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0xc2, 0xa2, 0x84, 0x6d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xef, 0xa7, 0xe6, 0x5e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x8b, 0xfd, 0xb1, 0x3a, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x17, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x18, 0x93, 0xb7, 0xf5, 0x2f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x12, 0x2e, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x18, 0xc9, 0x9a, 0xa2, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6b,
	0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x17, 0x69, 0x73, 0x73, 0x75,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0xdf, 0xdf, 0xd9, 0x33, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x69, 0x73,
	0x73, 0x75, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0xe1, 0xbb, 0xf8, 0xee, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0xf3, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x97, 0xe3, 0xca, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x63, 0x73,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0xf2, 0xa7, 0xf0, 0xfd, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x63, 0x73, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x40, 0x0a, 0x19, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xaf, 0xd8, 0xfd,
	0x80, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0xf4, 0xff, 0xfb, 0x94, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x11, 0x73,
	0x68, 0x61, 0x5f, 0x31, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x18, 0xfd, 0x90, 0x82, 0x98, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x68, 0x61, 0x5f,
	0x31, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x13, 0x73, 0x68, 0x61, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x18, 0x9d, 0xc1, 0x86, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x73, 0x68, 0x61, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0xb9, 0xb1, 0xf6, 0xff, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x18, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0xbe, 0x8a, 0x93, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0xd7, 0xd5, 0xd6, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0xfe, 0xe0, 0xb9,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x15, 0x0a, 0x04, 0x75, 0x72, 0x69,
	0x73, 0x18, 0x87, 0xd1, 0xdb, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x69, 0x73,
	0x12, 0x1c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xd8, 0xb9, 0xd4, 0xa7,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x51,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x50, 0x01, 0x5a, 0x0f, 0x2e, 0x3b, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0xaa, 0x02, 0x0d, 0x41, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73,
	0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0xca, 0x02, 0x0d, 0x41, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73,
	0x73, 0x5c, 0x67, 0x52, 0x50, 0x43, 0xe2, 0x02, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x50, 0x00, 0x50, 0x01, 0x50, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_models_certificate_info_proto_rawDescOnce sync.Once
	file_models_certificate_info_proto_rawDescData = file_models_certificate_info_proto_rawDesc
)

func file_models_certificate_info_proto_rawDescGZIP() []byte {
	file_models_certificate_info_proto_rawDescOnce.Do(func() {
		file_models_certificate_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_models_certificate_info_proto_rawDescData)
	})
	return file_models_certificate_info_proto_rawDescData
}

var file_models_certificate_info_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_models_certificate_info_proto_goTypes = []any{
	(*CertificateInfo)(nil), // 0: akeyless_grpc.CertificateInfo
	(*Extension)(nil),       // 1: akeyless_grpc.Extension
	(*Name)(nil),            // 2: akeyless_grpc.Name
}
var file_models_certificate_info_proto_depIdxs = []int32{
	1, // 0: akeyless_grpc.CertificateInfo.extensions:type_name -> akeyless_grpc.Extension
	2, // 1: akeyless_grpc.CertificateInfo.issuer:type_name -> akeyless_grpc.Name
	2, // 2: akeyless_grpc.CertificateInfo.subject:type_name -> akeyless_grpc.Name
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_models_certificate_info_proto_init() }
func file_models_certificate_info_proto_init() {
	if File_models_certificate_info_proto != nil {
		return
	}
	file_models_special_types_proto_init()
	file_models_extension_proto_init()
	file_models_name_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_models_certificate_info_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CertificateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_models_certificate_info_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_models_certificate_info_proto_goTypes,
		DependencyIndexes: file_models_certificate_info_proto_depIdxs,
		MessageInfos:      file_models_certificate_info_proto_msgTypes,
	}.Build()
	File_models_certificate_info_proto = out.File
	file_models_certificate_info_proto_rawDesc = nil
	file_models_certificate_info_proto_goTypes = nil
	file_models_certificate_info_proto_depIdxs = nil
}
