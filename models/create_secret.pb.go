//
//Akeyless API
//
//The purpose of this application is to provide access to Akeyless API.
//
//The version of the OpenAPI document: 2.0
//
//Contact: support@akeyless.io
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.24.4
// source: models/create_secret.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// for personal password manager
	Accessibility string `protobuf:"bytes,213139122,opt,name=accessibility,proto3" json:"accessibility,omitempty"`
	// Trigger an event when a secret value changed [true/false] (Relevant only for Static Secret)
	ChangeEvent string `protobuf:"bytes,120187333,opt,name=change_event,json=change-event,proto3" json:"change_event,omitempty"`
	// For Password Management use, additional fields
	CustomField map[string]string `protobuf:"bytes,176478307,rep,name=custom_field,json=custom-field,proto3" json:"custom_field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Protection from accidental deletion of this object [true/false]
	DeleteProtection string `protobuf:"bytes,517947888,opt,name=delete_protection,proto3" json:"delete_protection,omitempty"`
	// Description of the object
	Description string `protobuf:"bytes,113933319,opt,name=description,proto3" json:"description,omitempty"`
	// Secret format [text/json] (relevant only for type 'generic')
	Format string `protobuf:"bytes,195037195,opt,name=format,proto3" json:"format,omitempty"`
	// For Password Management use, reflect the website context
	InjectUrl []string `protobuf:"bytes,419541814,rep,name=inject_url,json=inject-url,proto3" json:"inject_url,omitempty"`
	// Set output format to JSON
	Json bool `protobuf:"varint,3271912,opt,name=json,proto3" json:"json,omitempty"`
	// Set the maximum number of versions, limited by the account settings defaults.
	MaxVersions string `protobuf:"bytes,311546653,opt,name=max_versions,json=max-versions,proto3" json:"max_versions,omitempty"`
	// Deprecated - use description
	Metadata string `protobuf:"bytes,450004177,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The provided value is a multiline value (separated by '\\n')
	MultilineValue bool `protobuf:"varint,204914851,opt,name=multiline_value,proto3" json:"multiline_value,omitempty"`
	// Secret name
	Name string `protobuf:"bytes,3373707,opt,name=name,proto3" json:"name,omitempty"`
	// For Password Management use, additional fields
	Password string `protobuf:"bytes,143243933,opt,name=password,proto3" json:"password,omitempty"`
	// The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
	ProtectionKey string `protobuf:"bytes,345297913,opt,name=protection_key,proto3" json:"protection_key,omitempty"`
	// Path to the SSH Certificate Issuer for your Akeyless Bastion
	SecureAccessBastionIssuer string `protobuf:"bytes,471808848,opt,name=secure_access_bastion_issuer,json=secure-access-bastion-issuer,proto3" json:"secure_access_bastion_issuer,omitempty"`
	// Enable/Disable secure remote access [true/false]
	SecureAccessEnable string `protobuf:"bytes,19968568,opt,name=secure_access_enable,json=secure-access-enable,proto3" json:"secure_access_enable,omitempty"`
	// Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)
	SecureAccessHost []string `protobuf:"bytes,362681116,rep,name=secure_access_host,json=secure-access-host,proto3" json:"secure_access_host,omitempty"`
	// Remote Desktop Username
	SecureAccessRdpUser string `protobuf:"bytes,66068397,opt,name=secure_access_rdp_user,json=secure-access-rdp-user,proto3" json:"secure_access_rdp_user,omitempty"`
	// Static-Secret values contains SSH Credentials, either Private Key or Password [password/private-key]
	SecureAccessSshCreds string `protobuf:"bytes,475656016,opt,name=secure_access_ssh_creds,json=secure-access-ssh-creds,proto3" json:"secure_access_ssh_creds,omitempty"`
	// Override the SSH username as indicated in SSH Certificate Issuer
	SecureAccessSshUser string `protobuf:"bytes,396886118,opt,name=secure_access_ssh_user,json=secure-access-ssh-user,proto3" json:"secure_access_ssh_user,omitempty"`
	// Destination URL to inject secrets
	SecureAccessUrl string `protobuf:"bytes,479309214,opt,name=secure_access_url,json=secure-access-url,proto3" json:"secure_access_url,omitempty"`
	// Secure browser via Akeyless Web Access Bastion
	SecureAccessWebBrowsing bool `protobuf:"varint,258508398,opt,name=secure_access_web_browsing,json=secure-access-web-browsing,proto3" json:"secure_access_web_browsing,omitempty"`
	// Web-Proxy via Akeyless Web Access Bastion
	SecureAccessWebProxy bool `protobuf:"varint,496161502,opt,name=secure_access_web_proxy,json=secure-access-web-proxy,proto3" json:"secure_access_web_proxy,omitempty"`
	// Add tags attached to this object
	Tags []string `protobuf:"bytes,3552281,rep,name=tags,proto3" json:"tags,omitempty"`
	// Authentication token (see `/auth` and `/configure`)
	Token string `protobuf:"bytes,110541305,opt,name=token,proto3" json:"token,omitempty"`
	// The secret sub type [generic/password]
	Type string `protobuf:"bytes,3575610,opt,name=type,proto3" json:"type,omitempty"`
	// The universal identity token, Required only for universal_identity authentication
	UidToken string `protobuf:"bytes,468850238,opt,name=uid_token,json=uid-token,proto3" json:"uid_token,omitempty"`
	// For Password Management use
	Username string `protobuf:"bytes,265713450,opt,name=username,proto3" json:"username,omitempty"`
	// The secret value (relevant only for type 'generic')
	Value string `protobuf:"bytes,111972721,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CreateSecret) Reset() {
	*x = CreateSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_create_secret_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSecret) ProtoMessage() {}

func (x *CreateSecret) ProtoReflect() protoreflect.Message {
	mi := &file_models_create_secret_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSecret.ProtoReflect.Descriptor instead.
func (*CreateSecret) Descriptor() ([]byte, []int) {
	return file_models_create_secret_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSecret) GetAccessibility() string {
	if x != nil {
		return x.Accessibility
	}
	return ""
}

func (x *CreateSecret) GetChangeEvent() string {
	if x != nil {
		return x.ChangeEvent
	}
	return ""
}

func (x *CreateSecret) GetCustomField() map[string]string {
	if x != nil {
		return x.CustomField
	}
	return nil
}

func (x *CreateSecret) GetDeleteProtection() string {
	if x != nil {
		return x.DeleteProtection
	}
	return ""
}

func (x *CreateSecret) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSecret) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *CreateSecret) GetInjectUrl() []string {
	if x != nil {
		return x.InjectUrl
	}
	return nil
}

func (x *CreateSecret) GetJson() bool {
	if x != nil {
		return x.Json
	}
	return false
}

func (x *CreateSecret) GetMaxVersions() string {
	if x != nil {
		return x.MaxVersions
	}
	return ""
}

func (x *CreateSecret) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *CreateSecret) GetMultilineValue() bool {
	if x != nil {
		return x.MultilineValue
	}
	return false
}

func (x *CreateSecret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSecret) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateSecret) GetProtectionKey() string {
	if x != nil {
		return x.ProtectionKey
	}
	return ""
}

func (x *CreateSecret) GetSecureAccessBastionIssuer() string {
	if x != nil {
		return x.SecureAccessBastionIssuer
	}
	return ""
}

func (x *CreateSecret) GetSecureAccessEnable() string {
	if x != nil {
		return x.SecureAccessEnable
	}
	return ""
}

func (x *CreateSecret) GetSecureAccessHost() []string {
	if x != nil {
		return x.SecureAccessHost
	}
	return nil
}

func (x *CreateSecret) GetSecureAccessRdpUser() string {
	if x != nil {
		return x.SecureAccessRdpUser
	}
	return ""
}

func (x *CreateSecret) GetSecureAccessSshCreds() string {
	if x != nil {
		return x.SecureAccessSshCreds
	}
	return ""
}

func (x *CreateSecret) GetSecureAccessSshUser() string {
	if x != nil {
		return x.SecureAccessSshUser
	}
	return ""
}

func (x *CreateSecret) GetSecureAccessUrl() string {
	if x != nil {
		return x.SecureAccessUrl
	}
	return ""
}

func (x *CreateSecret) GetSecureAccessWebBrowsing() bool {
	if x != nil {
		return x.SecureAccessWebBrowsing
	}
	return false
}

func (x *CreateSecret) GetSecureAccessWebProxy() bool {
	if x != nil {
		return x.SecureAccessWebProxy
	}
	return false
}

func (x *CreateSecret) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateSecret) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CreateSecret) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateSecret) GetUidToken() string {
	if x != nil {
		return x.UidToken
	}
	return ""
}

func (x *CreateSecret) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateSecret) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_models_create_secret_proto protoreflect.FileDescriptor

var file_models_create_secret_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x6b,
	0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x1a, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x0a, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xb2, 0xfd, 0xd0, 0x65, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x25, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0xc5, 0xd3, 0xa7, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xe3, 0xb0, 0x93, 0x54, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x30, 0x0a,
	0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xf0, 0x83, 0xfd, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x87,
	0xf8, 0xa9, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x8b,
	0x90, 0x80, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0xb6, 0xe6,
	0x86, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x2d,
	0x75, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0xe8, 0xd9, 0xc7, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x9d, 0xa6, 0xc7, 0x94, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xd1,
	0x89, 0xca, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xa3, 0x81, 0xdb, 0x61, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x15, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x8b, 0xf5, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x9d, 0xf5, 0xa6, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0xf9, 0xa7, 0xd3, 0xa4, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x12, 0x46, 0x0a, 0x1c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x18, 0xd0, 0xf6, 0xfc, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x62, 0x61, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x14, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0xb8, 0xe4, 0xc2, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x32, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x9c, 0xa6, 0xf8, 0xac, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x64, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0xad,
	0xbf, 0xc0, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2d,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x72, 0x64, 0x70, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x17, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x73, 0x68, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0xd0, 0xde, 0xe7, 0xe2, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2d, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2d, 0x73, 0x73, 0x68, 0x2d, 0x63, 0x72, 0x65, 0x64, 0x73, 0x12, 0x3a, 0x0a,
	0x16, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x73, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0xe6, 0x80, 0xa0, 0xbd, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2d, 0x73, 0x73, 0x68, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x9e,
	0xdb, 0xc6, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x75, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x1a, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x62,
	0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x18, 0xee, 0x8c, 0xa2, 0x7b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2d, 0x77, 0x65, 0x62, 0x2d, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x3c,
	0x0a, 0x17, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x77, 0x65, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0xde, 0xa5, 0xcb, 0xec, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2d, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x77, 0x65, 0x62, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x15, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x99, 0xe8, 0xd8, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0xf9, 0xf3, 0xda,
	0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x15, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0xba, 0x9e, 0xda, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0xbe, 0xac, 0xc8, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x69, 0x64, 0x2d,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0xaa, 0xee, 0xd9, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xf1, 0xa2,
	0xb2, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x3e, 0x0a,
	0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x51, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x50, 0x01, 0x5a, 0x0f, 0x2e, 0x3b, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0xaa, 0x02, 0x0d, 0x41, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73,
	0x2e, 0x47, 0x72, 0x70, 0x63, 0xca, 0x02, 0x0d, 0x41, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73,
	0x5c, 0x67, 0x52, 0x50, 0x43, 0xe2, 0x02, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x50, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_models_create_secret_proto_rawDescOnce sync.Once
	file_models_create_secret_proto_rawDescData = file_models_create_secret_proto_rawDesc
)

func file_models_create_secret_proto_rawDescGZIP() []byte {
	file_models_create_secret_proto_rawDescOnce.Do(func() {
		file_models_create_secret_proto_rawDescData = protoimpl.X.CompressGZIP(file_models_create_secret_proto_rawDescData)
	})
	return file_models_create_secret_proto_rawDescData
}

var file_models_create_secret_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_models_create_secret_proto_goTypes = []any{
	(*CreateSecret)(nil), // 0: akeyless_grpc.CreateSecret
	nil,                  // 1: akeyless_grpc.CreateSecret.CustomFieldEntry
}
var file_models_create_secret_proto_depIdxs = []int32{
	1, // 0: akeyless_grpc.CreateSecret.custom_field:type_name -> akeyless_grpc.CreateSecret.CustomFieldEntry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_models_create_secret_proto_init() }
func file_models_create_secret_proto_init() {
	if File_models_create_secret_proto != nil {
		return
	}
	file_models_special_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_models_create_secret_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_models_create_secret_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_models_create_secret_proto_goTypes,
		DependencyIndexes: file_models_create_secret_proto_depIdxs,
		MessageInfos:      file_models_create_secret_proto_msgTypes,
	}.Build()
	File_models_create_secret_proto = out.File
	file_models_create_secret_proto_rawDesc = nil
	file_models_create_secret_proto_goTypes = nil
	file_models_create_secret_proto_depIdxs = nil
}
