//
//Akeyless API
//
//The purpose of this application is to provide access to Akeyless API.
//
//The version of the OpenAPI document: 2.0
//
//Contact: support@akeyless.io
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.24.4
// source: models/item.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessDate              string                `protobuf:"bytes,495996504,opt,name=access_date,proto3" json:"access_date,omitempty"`
	AccessDateDisplay       string                `protobuf:"bytes,93370412,opt,name=access_date_display,proto3" json:"access_date_display,omitempty"`
	AccessRequestStatus     string                `protobuf:"bytes,207523875,opt,name=access_request_status,proto3" json:"access_request_status,omitempty"`
	AutoRotate              bool                  `protobuf:"varint,198702615,opt,name=auto_rotate,proto3" json:"auto_rotate,omitempty"`
	BastionDetails          *BastionsList         `protobuf:"bytes,416847404,opt,name=bastion_details,proto3" json:"bastion_details,omitempty"`
	CertIssuerSignerKeyName string                `protobuf:"bytes,485575896,opt,name=cert_issuer_signer_key_name,proto3" json:"cert_issuer_signer_key_name,omitempty"`
	CertificateIssueDetails *CertificateIssueInfo `protobuf:"bytes,485271502,opt,name=certificate_issue_details,proto3" json:"certificate_issue_details,omitempty"`
	Certificates            string                `protobuf:"bytes,394850748,opt,name=certificates,proto3" json:"certificates,omitempty"`
	ClientPermissions       []string              `protobuf:"bytes,61074962,rep,name=client_permissions,proto3" json:"client_permissions,omitempty"`
	CreationDate            string                `protobuf:"bytes,321236241,opt,name=creation_date,proto3" json:"creation_date,omitempty"`
	CustomerFragmentId      string                `protobuf:"bytes,110711159,opt,name=customer_fragment_id,proto3" json:"customer_fragment_id,omitempty"`
	DeleteProtection        bool                  `protobuf:"varint,517947888,opt,name=delete_protection,proto3" json:"delete_protection,omitempty"`
	DeletionDate            string                `protobuf:"bytes,519441025,opt,name=deletion_date,proto3" json:"deletion_date,omitempty"`
	DisplayId               string                `protobuf:"bytes,377648713,opt,name=display_id,proto3" json:"display_id,omitempty"`
	GatewayDetails          []*GatewayBasicInfo   `protobuf:"bytes,55944380,rep,name=gateway_details,proto3" json:"gateway_details,omitempty"`
	IsAccessRequestEnabled  bool                  `protobuf:"varint,426079384,opt,name=is_access_request_enabled,proto3" json:"is_access_request_enabled,omitempty"`
	IsEnabled               bool                  `protobuf:"varint,109284052,opt,name=is_enabled,proto3" json:"is_enabled,omitempty"`
	ItemAccessibility       int64                 `protobuf:"varint,308326691,opt,name=item_accessibility,proto3" json:"item_accessibility,omitempty"`
	ItemGeneralInfo         *ItemGeneralInfo      `protobuf:"bytes,438293680,opt,name=item_general_info,proto3" json:"item_general_info,omitempty"`
	ItemId                  int64                 `protobuf:"varint,505592266,opt,name=item_id,proto3" json:"item_id,omitempty"`
	ItemMetadata            string                `protobuf:"bytes,61933861,opt,name=item_metadata,proto3" json:"item_metadata,omitempty"`
	ItemName                string                `protobuf:"bytes,530731980,opt,name=item_name,proto3" json:"item_name,omitempty"`
	ItemSize                int64                 `protobuf:"varint,530574934,opt,name=item_size,proto3" json:"item_size,omitempty"`
	// ItemState defines the different states an Item can be in
	ItemState            string                   `protobuf:"bytes,341391262,opt,name=item_state,proto3" json:"item_state,omitempty"`
	ItemSubType          string                   `protobuf:"bytes,80876158,opt,name=item_sub_type,proto3" json:"item_sub_type,omitempty"`
	ItemTags             []string                 `protobuf:"bytes,530553406,rep,name=item_tags,proto3" json:"item_tags,omitempty"`
	ItemTargetsAssoc     []*ItemTargetAssociation `protobuf:"bytes,263866773,rep,name=item_targets_assoc,proto3" json:"item_targets_assoc,omitempty"`
	ItemType             string                   `protobuf:"bytes,530530077,opt,name=item_type,proto3" json:"item_type,omitempty"`
	ItemVersions         []*ItemVersion           `protobuf:"bytes,523240891,rep,name=item_versions,proto3" json:"item_versions,omitempty"`
	LastRotationDate     string                   `protobuf:"bytes,172867049,opt,name=last_rotation_date,proto3" json:"last_rotation_date,omitempty"`
	LastVersion          int32                    `protobuf:"varint,387866672,opt,name=last_version,proto3" json:"last_version,omitempty"`
	LinkedDetails        *LinkedDetails           `protobuf:"bytes,61336037,opt,name=linked_details,proto3" json:"linked_details,omitempty"`
	ModificationDate     string                   `protobuf:"bytes,202999697,opt,name=modification_date,proto3" json:"modification_date,omitempty"`
	NextRotationDate     string                   `protobuf:"bytes,34451584,opt,name=next_rotation_date,proto3" json:"next_rotation_date,omitempty"`
	ProtectionKeyName    string                   `protobuf:"bytes,80474900,opt,name=protection_key_name,proto3" json:"protection_key_name,omitempty"`
	ProtectionKeyType    string                   `protobuf:"bytes,80676803,opt,name=protection_key_type,proto3" json:"protection_key_type,omitempty"`
	PublicValue          string                   `protobuf:"bytes,342324252,opt,name=public_value,proto3" json:"public_value,omitempty"`
	RotationInterval     int64                    `protobuf:"varint,273509274,opt,name=rotation_interval,proto3" json:"rotation_interval,omitempty"`
	SharedBy             *RuleAssigner            `protobuf:"bytes,507826577,opt,name=shared_by,proto3" json:"shared_by,omitempty"`
	TargetVersions       []*TargetItemVersion     `protobuf:"bytes,102927994,rep,name=target_versions,proto3" json:"target_versions,omitempty"`
	WithCustomerFragment bool                     `protobuf:"varint,40616536,opt,name=with_customer_fragment,proto3" json:"with_customer_fragment,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_item_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_models_item_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_models_item_proto_rawDescGZIP(), []int{0}
}

func (x *Item) GetAccessDate() string {
	if x != nil {
		return x.AccessDate
	}
	return ""
}

func (x *Item) GetAccessDateDisplay() string {
	if x != nil {
		return x.AccessDateDisplay
	}
	return ""
}

func (x *Item) GetAccessRequestStatus() string {
	if x != nil {
		return x.AccessRequestStatus
	}
	return ""
}

func (x *Item) GetAutoRotate() bool {
	if x != nil {
		return x.AutoRotate
	}
	return false
}

func (x *Item) GetBastionDetails() *BastionsList {
	if x != nil {
		return x.BastionDetails
	}
	return nil
}

func (x *Item) GetCertIssuerSignerKeyName() string {
	if x != nil {
		return x.CertIssuerSignerKeyName
	}
	return ""
}

func (x *Item) GetCertificateIssueDetails() *CertificateIssueInfo {
	if x != nil {
		return x.CertificateIssueDetails
	}
	return nil
}

func (x *Item) GetCertificates() string {
	if x != nil {
		return x.Certificates
	}
	return ""
}

func (x *Item) GetClientPermissions() []string {
	if x != nil {
		return x.ClientPermissions
	}
	return nil
}

func (x *Item) GetCreationDate() string {
	if x != nil {
		return x.CreationDate
	}
	return ""
}

func (x *Item) GetCustomerFragmentId() string {
	if x != nil {
		return x.CustomerFragmentId
	}
	return ""
}

func (x *Item) GetDeleteProtection() bool {
	if x != nil {
		return x.DeleteProtection
	}
	return false
}

func (x *Item) GetDeletionDate() string {
	if x != nil {
		return x.DeletionDate
	}
	return ""
}

func (x *Item) GetDisplayId() string {
	if x != nil {
		return x.DisplayId
	}
	return ""
}

func (x *Item) GetGatewayDetails() []*GatewayBasicInfo {
	if x != nil {
		return x.GatewayDetails
	}
	return nil
}

func (x *Item) GetIsAccessRequestEnabled() bool {
	if x != nil {
		return x.IsAccessRequestEnabled
	}
	return false
}

func (x *Item) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *Item) GetItemAccessibility() int64 {
	if x != nil {
		return x.ItemAccessibility
	}
	return 0
}

func (x *Item) GetItemGeneralInfo() *ItemGeneralInfo {
	if x != nil {
		return x.ItemGeneralInfo
	}
	return nil
}

func (x *Item) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *Item) GetItemMetadata() string {
	if x != nil {
		return x.ItemMetadata
	}
	return ""
}

func (x *Item) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *Item) GetItemSize() int64 {
	if x != nil {
		return x.ItemSize
	}
	return 0
}

func (x *Item) GetItemState() string {
	if x != nil {
		return x.ItemState
	}
	return ""
}

func (x *Item) GetItemSubType() string {
	if x != nil {
		return x.ItemSubType
	}
	return ""
}

func (x *Item) GetItemTags() []string {
	if x != nil {
		return x.ItemTags
	}
	return nil
}

func (x *Item) GetItemTargetsAssoc() []*ItemTargetAssociation {
	if x != nil {
		return x.ItemTargetsAssoc
	}
	return nil
}

func (x *Item) GetItemType() string {
	if x != nil {
		return x.ItemType
	}
	return ""
}

func (x *Item) GetItemVersions() []*ItemVersion {
	if x != nil {
		return x.ItemVersions
	}
	return nil
}

func (x *Item) GetLastRotationDate() string {
	if x != nil {
		return x.LastRotationDate
	}
	return ""
}

func (x *Item) GetLastVersion() int32 {
	if x != nil {
		return x.LastVersion
	}
	return 0
}

func (x *Item) GetLinkedDetails() *LinkedDetails {
	if x != nil {
		return x.LinkedDetails
	}
	return nil
}

func (x *Item) GetModificationDate() string {
	if x != nil {
		return x.ModificationDate
	}
	return ""
}

func (x *Item) GetNextRotationDate() string {
	if x != nil {
		return x.NextRotationDate
	}
	return ""
}

func (x *Item) GetProtectionKeyName() string {
	if x != nil {
		return x.ProtectionKeyName
	}
	return ""
}

func (x *Item) GetProtectionKeyType() string {
	if x != nil {
		return x.ProtectionKeyType
	}
	return ""
}

func (x *Item) GetPublicValue() string {
	if x != nil {
		return x.PublicValue
	}
	return ""
}

func (x *Item) GetRotationInterval() int64 {
	if x != nil {
		return x.RotationInterval
	}
	return 0
}

func (x *Item) GetSharedBy() *RuleAssigner {
	if x != nil {
		return x.SharedBy
	}
	return nil
}

func (x *Item) GetTargetVersions() []*TargetItemVersion {
	if x != nil {
		return x.TargetVersions
	}
	return nil
}

func (x *Item) GetWithCustomerFragment() bool {
	if x != nil {
		return x.WithCustomerFragment
	}
	return false
}

var File_models_item_proto protoreflect.FileDescriptor

var file_models_item_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x1a, 0x1a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x10, 0x0a,
	0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0xd8, 0x9c, 0xc1, 0xec, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x13, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x18, 0xac, 0xf0, 0xc2, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x37, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xa3, 0xa0, 0xfa, 0x62, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x18, 0x97, 0xec, 0xdf, 0x5e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49,
	0x0a, 0x0f, 0x62, 0x61, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0xac, 0xac, 0xe2, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6b,
	0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x1b, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd8, 0x99, 0xc5, 0xe7, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x65, 0x0a, 0x19, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0xce, 0xcf, 0xb2,
	0xe7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x19, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0xbc, 0xe3, 0xa3, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x92, 0xdc, 0x8f, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x91, 0xda, 0x96, 0x99, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x14, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0xf7, 0xa2, 0xe5, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf0, 0x83, 0xfd, 0xf6, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x81, 0x95, 0xd8, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0xc9, 0xec, 0x89,
	0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x69, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0xbc, 0xc9, 0xd6, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x40, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x98, 0xe9,
	0x95, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0xd4, 0x95, 0x8e, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xa3, 0xe2, 0x82, 0x93,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x11, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xb0,
	0xa9, 0xff, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0xca, 0xf3, 0x8a, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xa5, 0x92, 0xc4, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0xcc, 0xa7, 0x89, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0xd6, 0xdc, 0xff, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x9e, 0xef, 0xe4, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xfe, 0xa4, 0xc8, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0xbe, 0xb4, 0xfe, 0xfc, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x74, 0x61, 0x67, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x18, 0x95, 0x93, 0xe9, 0x7d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x12, 0x20,
	0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x9d, 0xfe, 0xfc, 0xfc,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x44, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xbb, 0x8b, 0xc0, 0xf9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b,
	0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0xe9, 0xfb, 0xb6,
	0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xb0, 0xc0, 0xf9, 0xb8, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x47, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0xe5, 0xd3, 0x9f, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61,
	0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x91, 0x8f, 0xe6, 0x60, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x12, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x80, 0xe1, 0xb6, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x33,
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x94, 0xe6, 0xaf, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xc3, 0x8f, 0xbc, 0x26, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x9c, 0xe8, 0x9d, 0xa3, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x30, 0x0a, 0x11, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x9a, 0xd7, 0xb5, 0x82, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x91, 0xa3, 0x93, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6b, 0x65, 0x79,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x12, 0x4d, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfa, 0x9c, 0x8a, 0x31, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x39, 0x0a, 0x16, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xd8, 0x84, 0xaf, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x51, 0x0a, 0x11, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x50, 0x01, 0x5a, 0x0f, 0x2e, 0x3b, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0xaa, 0x02, 0x0d, 0x41, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x47,
	0x72, 0x70, 0x63, 0xca, 0x02, 0x0d, 0x41, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5c, 0x67,
	0x52, 0x50, 0x43, 0xe2, 0x02, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x00,
	0x50, 0x01, 0x50, 0x02, 0x50, 0x03, 0x50, 0x04, 0x50, 0x05, 0x50, 0x06, 0x50, 0x07, 0x50, 0x08,
	0x50, 0x09, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_models_item_proto_rawDescOnce sync.Once
	file_models_item_proto_rawDescData = file_models_item_proto_rawDesc
)

func file_models_item_proto_rawDescGZIP() []byte {
	file_models_item_proto_rawDescOnce.Do(func() {
		file_models_item_proto_rawDescData = protoimpl.X.CompressGZIP(file_models_item_proto_rawDescData)
	})
	return file_models_item_proto_rawDescData
}

var file_models_item_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_models_item_proto_goTypes = []any{
	(*Item)(nil),                  // 0: akeyless_grpc.Item
	(*BastionsList)(nil),          // 1: akeyless_grpc.BastionsList
	(*CertificateIssueInfo)(nil),  // 2: akeyless_grpc.CertificateIssueInfo
	(*GatewayBasicInfo)(nil),      // 3: akeyless_grpc.GatewayBasicInfo
	(*ItemGeneralInfo)(nil),       // 4: akeyless_grpc.ItemGeneralInfo
	(*ItemTargetAssociation)(nil), // 5: akeyless_grpc.ItemTargetAssociation
	(*ItemVersion)(nil),           // 6: akeyless_grpc.ItemVersion
	(*LinkedDetails)(nil),         // 7: akeyless_grpc.LinkedDetails
	(*RuleAssigner)(nil),          // 8: akeyless_grpc.RuleAssigner
	(*TargetItemVersion)(nil),     // 9: akeyless_grpc.TargetItemVersion
}
var file_models_item_proto_depIdxs = []int32{
	1, // 0: akeyless_grpc.Item.bastion_details:type_name -> akeyless_grpc.BastionsList
	2, // 1: akeyless_grpc.Item.certificate_issue_details:type_name -> akeyless_grpc.CertificateIssueInfo
	3, // 2: akeyless_grpc.Item.gateway_details:type_name -> akeyless_grpc.GatewayBasicInfo
	4, // 3: akeyless_grpc.Item.item_general_info:type_name -> akeyless_grpc.ItemGeneralInfo
	5, // 4: akeyless_grpc.Item.item_targets_assoc:type_name -> akeyless_grpc.ItemTargetAssociation
	6, // 5: akeyless_grpc.Item.item_versions:type_name -> akeyless_grpc.ItemVersion
	7, // 6: akeyless_grpc.Item.linked_details:type_name -> akeyless_grpc.LinkedDetails
	8, // 7: akeyless_grpc.Item.shared_by:type_name -> akeyless_grpc.RuleAssigner
	9, // 8: akeyless_grpc.Item.target_versions:type_name -> akeyless_grpc.TargetItemVersion
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_models_item_proto_init() }
func file_models_item_proto_init() {
	if File_models_item_proto != nil {
		return
	}
	file_models_special_types_proto_init()
	file_models_bastions_list_proto_init()
	file_models_certificate_issue_info_proto_init()
	file_models_gateway_basic_info_proto_init()
	file_models_item_general_info_proto_init()
	file_models_item_target_association_proto_init()
	file_models_item_version_proto_init()
	file_models_linked_details_proto_init()
	file_models_rule_assigner_proto_init()
	file_models_target_item_version_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_models_item_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_models_item_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_models_item_proto_goTypes,
		DependencyIndexes: file_models_item_proto_depIdxs,
		MessageInfos:      file_models_item_proto_msgTypes,
	}.Build()
	File_models_item_proto = out.File
	file_models_item_proto_rawDesc = nil
	file_models_item_proto_goTypes = nil
	file_models_item_proto_depIdxs = nil
}
