//
//Akeyless API
//
//The purpose of this application is to provide access to Akeyless API.
//
//The version of the OpenAPI document: 2.0
//
//Contact: support@akeyless.io
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.24.4
// source: models/secure_remote_access.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SecureRemoteAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId                       string                 `protobuf:"bytes,266462100,opt,name=account_id,proto3" json:"account_id,omitempty"`
	AllowPortForwarding             bool                   `protobuf:"varint,143305861,opt,name=allow_port_forwarding,proto3" json:"allow_port_forwarding,omitempty"`
	AllowProvidingExternalUsername  bool                   `protobuf:"varint,410658829,opt,name=allow_providing_external_username,proto3" json:"allow_providing_external_username,omitempty"`
	BastionApi                      string                 `protobuf:"bytes,231114111,opt,name=bastion_api,proto3" json:"bastion_api,omitempty"`
	BastionIssuer                   string                 `protobuf:"bytes,481242545,opt,name=bastion_issuer,proto3" json:"bastion_issuer,omitempty"`
	BastionIssuerId                 int64                  `protobuf:"varint,440982006,opt,name=bastion_issuer_id,proto3" json:"bastion_issuer_id,omitempty"`
	BastionSsh                      string                 `protobuf:"bytes,231096721,opt,name=bastion_ssh,proto3" json:"bastion_ssh,omitempty"`
	BlockConcurrentConnections      bool                   `protobuf:"varint,18804035,opt,name=block_concurrent_connections,proto3" json:"block_concurrent_connections,omitempty"`
	BlockConcurrentConnectionsLevel string                 `protobuf:"bytes,498088446,opt,name=block_concurrent_connections_level,proto3" json:"block_concurrent_connections_level,omitempty"`
	Category                        string                 `protobuf:"bytes,50511102,opt,name=category,proto3" json:"category,omitempty"`
	DashboardUrl                    string                 `protobuf:"bytes,161974973,opt,name=dashboard_url,proto3" json:"dashboard_url,omitempty"`
	DbName                          string                 `protobuf:"bytes,379078062,opt,name=db_name,proto3" json:"db_name,omitempty"`
	Domain                          string                 `protobuf:"bytes,252455742,opt,name=domain,proto3" json:"domain,omitempty"`
	Enable                          bool                   `protobuf:"varint,225106559,opt,name=enable,proto3" json:"enable,omitempty"`
	Endpoint                        string                 `protobuf:"bytes,130489752,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Host                            []string               `protobuf:"bytes,3208616,rep,name=host,proto3" json:"host,omitempty"`
	HostProviderType                string                 `protobuf:"bytes,327937425,opt,name=host_provider_type,proto3" json:"host_provider_type,omitempty"`
	IsCli                           bool                   `protobuf:"varint,106030967,opt,name=is_cli,proto3" json:"is_cli,omitempty"`
	IsWeb                           bool                   `protobuf:"varint,106011971,opt,name=is_web,proto3" json:"is_web,omitempty"`
	Isolated                        bool                   `protobuf:"varint,38909210,opt,name=isolated,proto3" json:"isolated,omitempty"`
	Native                          bool                   `protobuf:"varint,515747818,opt,name=native,proto3" json:"native,omitempty"`
	RdGatewayServer                 string                 `protobuf:"bytes,479790923,opt,name=rd_gateway_server,proto3" json:"rd_gateway_server,omitempty"`
	RdpUser                         string                 `protobuf:"bytes,255489302,opt,name=rdp_user,proto3" json:"rdp_user,omitempty"`
	Region                          string                 `protobuf:"bytes,397924621,opt,name=region,proto3" json:"region,omitempty"`
	RotateAfterDisconnect           bool                   `protobuf:"varint,184102211,opt,name=rotate_after_disconnect,proto3" json:"rotate_after_disconnect,omitempty"`
	Schema                          string                 `protobuf:"bytes,371116640,opt,name=schema,proto3" json:"schema,omitempty"`
	SshPassword                     bool                   `protobuf:"varint,481397006,opt,name=ssh_password,proto3" json:"ssh_password,omitempty"`
	SshPrivateKey                   bool                   `protobuf:"varint,165857772,opt,name=ssh_private_key,proto3" json:"ssh_private_key,omitempty"`
	SshUser                         string                 `protobuf:"bytes,75328419,opt,name=ssh_user,proto3" json:"ssh_user,omitempty"`
	StatusInfo                      *ItemSraStatus         `protobuf:"bytes,354650918,opt,name=status_info,proto3" json:"status_info,omitempty"`
	TargetHosts                     []*TargetNameWithHosts `protobuf:"bytes,208182371,rep,name=target_hosts,proto3" json:"target_hosts,omitempty"`
	Targets                         []string               `protobuf:"bytes,464535296,rep,name=targets,proto3" json:"targets,omitempty"`
	Url                             string                 `protobuf:"bytes,116079,opt,name=url,proto3" json:"url,omitempty"`
	UseInternalBastion              bool                   `protobuf:"varint,222003552,opt,name=use_internal_bastion,proto3" json:"use_internal_bastion,omitempty"`
	WebProxy                        bool                   `protobuf:"varint,263902782,opt,name=web_proxy,proto3" json:"web_proxy,omitempty"`
}

func (x *SecureRemoteAccess) Reset() {
	*x = SecureRemoteAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_secure_remote_access_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureRemoteAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureRemoteAccess) ProtoMessage() {}

func (x *SecureRemoteAccess) ProtoReflect() protoreflect.Message {
	mi := &file_models_secure_remote_access_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureRemoteAccess.ProtoReflect.Descriptor instead.
func (*SecureRemoteAccess) Descriptor() ([]byte, []int) {
	return file_models_secure_remote_access_proto_rawDescGZIP(), []int{0}
}

func (x *SecureRemoteAccess) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SecureRemoteAccess) GetAllowPortForwarding() bool {
	if x != nil {
		return x.AllowPortForwarding
	}
	return false
}

func (x *SecureRemoteAccess) GetAllowProvidingExternalUsername() bool {
	if x != nil {
		return x.AllowProvidingExternalUsername
	}
	return false
}

func (x *SecureRemoteAccess) GetBastionApi() string {
	if x != nil {
		return x.BastionApi
	}
	return ""
}

func (x *SecureRemoteAccess) GetBastionIssuer() string {
	if x != nil {
		return x.BastionIssuer
	}
	return ""
}

func (x *SecureRemoteAccess) GetBastionIssuerId() int64 {
	if x != nil {
		return x.BastionIssuerId
	}
	return 0
}

func (x *SecureRemoteAccess) GetBastionSsh() string {
	if x != nil {
		return x.BastionSsh
	}
	return ""
}

func (x *SecureRemoteAccess) GetBlockConcurrentConnections() bool {
	if x != nil {
		return x.BlockConcurrentConnections
	}
	return false
}

func (x *SecureRemoteAccess) GetBlockConcurrentConnectionsLevel() string {
	if x != nil {
		return x.BlockConcurrentConnectionsLevel
	}
	return ""
}

func (x *SecureRemoteAccess) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *SecureRemoteAccess) GetDashboardUrl() string {
	if x != nil {
		return x.DashboardUrl
	}
	return ""
}

func (x *SecureRemoteAccess) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *SecureRemoteAccess) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *SecureRemoteAccess) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *SecureRemoteAccess) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *SecureRemoteAccess) GetHost() []string {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *SecureRemoteAccess) GetHostProviderType() string {
	if x != nil {
		return x.HostProviderType
	}
	return ""
}

func (x *SecureRemoteAccess) GetIsCli() bool {
	if x != nil {
		return x.IsCli
	}
	return false
}

func (x *SecureRemoteAccess) GetIsWeb() bool {
	if x != nil {
		return x.IsWeb
	}
	return false
}

func (x *SecureRemoteAccess) GetIsolated() bool {
	if x != nil {
		return x.Isolated
	}
	return false
}

func (x *SecureRemoteAccess) GetNative() bool {
	if x != nil {
		return x.Native
	}
	return false
}

func (x *SecureRemoteAccess) GetRdGatewayServer() string {
	if x != nil {
		return x.RdGatewayServer
	}
	return ""
}

func (x *SecureRemoteAccess) GetRdpUser() string {
	if x != nil {
		return x.RdpUser
	}
	return ""
}

func (x *SecureRemoteAccess) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *SecureRemoteAccess) GetRotateAfterDisconnect() bool {
	if x != nil {
		return x.RotateAfterDisconnect
	}
	return false
}

func (x *SecureRemoteAccess) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *SecureRemoteAccess) GetSshPassword() bool {
	if x != nil {
		return x.SshPassword
	}
	return false
}

func (x *SecureRemoteAccess) GetSshPrivateKey() bool {
	if x != nil {
		return x.SshPrivateKey
	}
	return false
}

func (x *SecureRemoteAccess) GetSshUser() string {
	if x != nil {
		return x.SshUser
	}
	return ""
}

func (x *SecureRemoteAccess) GetStatusInfo() *ItemSraStatus {
	if x != nil {
		return x.StatusInfo
	}
	return nil
}

func (x *SecureRemoteAccess) GetTargetHosts() []*TargetNameWithHosts {
	if x != nil {
		return x.TargetHosts
	}
	return nil
}

func (x *SecureRemoteAccess) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *SecureRemoteAccess) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SecureRemoteAccess) GetUseInternalBastion() bool {
	if x != nil {
		return x.UseInternalBastion
	}
	return false
}

func (x *SecureRemoteAccess) GetWebProxy() bool {
	if x != nil {
		return x.WebProxy
	}
	return false
}

var File_models_secure_remote_access_proto protoreflect.FileDescriptor

var file_models_secure_remote_access_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x1a, 0x1a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x72, 0x61, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xcf, 0x0b, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x94, 0xc7, 0x87, 0x7f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x15, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x85, 0xd9, 0xaa, 0x44, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x50, 0x0a, 0x21, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x8d, 0xd0, 0xe8, 0xc3, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x21, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x70, 0x69, 0x18, 0xff, 0x8a, 0x9a, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x61, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x12, 0x2a, 0x0a, 0x0e, 0x62,
	0x61, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0xb1, 0xdb,
	0xbc, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0xf6, 0xb3, 0xa3,
	0xd2, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x61, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0b, 0x62, 0x61, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x73, 0x68, 0x18, 0x91, 0x83, 0x99, 0x6e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x73, 0x68, 0x12, 0x45,
	0x0a, 0x1c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc3,
	0xda, 0xfb, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a, 0x22, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0xfe, 0xf3, 0xc0, 0xed,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0xfe, 0xf9, 0x8a, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0d, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0xbd, 0x95, 0x9e, 0x4d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x72,
	0x6c, 0x12, 0x1c, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xae, 0x8b, 0xe1,
	0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0xbe, 0xd6, 0xb0, 0x78, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0xff, 0xb4, 0xab, 0x6b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x98, 0xbb, 0x9c, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0xa8, 0xeb, 0xc3,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x12, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x91, 0xdb, 0xaf, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x18, 0xf7, 0xce, 0xc7, 0x32, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x12, 0x19, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x77, 0x65, 0x62, 0x18, 0xc3, 0xba, 0xc6, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x5f, 0x77, 0x65, 0x62, 0x12, 0x1d, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x9a, 0xea, 0xc6, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x6f, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0xea,
	0xdf, 0xf6, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x30, 0x0a, 0x11, 0x72, 0x64, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0xcb, 0x8e, 0xe4, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x64, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x08, 0x72, 0x64, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x96,
	0xea, 0xe9, 0x79, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x64, 0x70, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x8d, 0xb2, 0xdf, 0xbd,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x17, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0xc3, 0xda, 0xe4, 0x57, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0xe0, 0x94, 0xfb, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x8e, 0x92, 0xc6, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2b,
	0x0a, 0x0f, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0xec, 0x93, 0x8b, 0x4f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x73, 0x68, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x08, 0x73,
	0x73, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0xa3, 0xd7, 0xf5, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x73, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xa6, 0x96, 0x8e, 0xa9, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x72, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x49,
	0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0xe3,
	0xb8, 0xa2, 0x63, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x18, 0x80, 0xfe, 0xc0, 0xdd, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0xef,
	0x8a, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x14, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xe0, 0x82, 0xee, 0x69, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x73,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18,
	0xbe, 0xac, 0xeb, 0x7d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x42, 0x51, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c,
	0x65, 0x73, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x50, 0x01, 0x5a, 0x0f, 0x2e, 0x3b, 0x61, 0x6b,
	0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0xaa, 0x02, 0x0d, 0x41, 0x6b,
	0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0xca, 0x02, 0x0d, 0x41, 0x6b,
	0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5c, 0x67, 0x52, 0x50, 0x43, 0xe2, 0x02, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x00, 0x50, 0x01, 0x50, 0x02, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_models_secure_remote_access_proto_rawDescOnce sync.Once
	file_models_secure_remote_access_proto_rawDescData = file_models_secure_remote_access_proto_rawDesc
)

func file_models_secure_remote_access_proto_rawDescGZIP() []byte {
	file_models_secure_remote_access_proto_rawDescOnce.Do(func() {
		file_models_secure_remote_access_proto_rawDescData = protoimpl.X.CompressGZIP(file_models_secure_remote_access_proto_rawDescData)
	})
	return file_models_secure_remote_access_proto_rawDescData
}

var file_models_secure_remote_access_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_models_secure_remote_access_proto_goTypes = []any{
	(*SecureRemoteAccess)(nil),  // 0: akeyless_grpc.SecureRemoteAccess
	(*ItemSraStatus)(nil),       // 1: akeyless_grpc.ItemSraStatus
	(*TargetNameWithHosts)(nil), // 2: akeyless_grpc.TargetNameWithHosts
}
var file_models_secure_remote_access_proto_depIdxs = []int32{
	1, // 0: akeyless_grpc.SecureRemoteAccess.status_info:type_name -> akeyless_grpc.ItemSraStatus
	2, // 1: akeyless_grpc.SecureRemoteAccess.target_hosts:type_name -> akeyless_grpc.TargetNameWithHosts
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_models_secure_remote_access_proto_init() }
func file_models_secure_remote_access_proto_init() {
	if File_models_secure_remote_access_proto != nil {
		return
	}
	file_models_special_types_proto_init()
	file_models_item_sra_status_proto_init()
	file_models_target_name_with_hosts_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_models_secure_remote_access_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SecureRemoteAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_models_secure_remote_access_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_models_secure_remote_access_proto_goTypes,
		DependencyIndexes: file_models_secure_remote_access_proto_depIdxs,
		MessageInfos:      file_models_secure_remote_access_proto_msgTypes,
	}.Build()
	File_models_secure_remote_access_proto = out.File
	file_models_secure_remote_access_proto_rawDesc = nil
	file_models_secure_remote_access_proto_goTypes = nil
	file_models_secure_remote_access_proto_depIdxs = nil
}
