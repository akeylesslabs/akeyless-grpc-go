//
//Akeyless API
//
//The purpose of this application is to provide access to Akeyless API.
//
//The version of the OpenAPI document: 2.0
//
//Contact: support@akeyless.io
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.24.4
// source: models/pki_certificate_issue_details.proto

package akeyless_grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PkiCertificateIssueDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowAnyName                  bool                    `protobuf:"varint,518243023,opt,name=allow_any_name,proto3" json:"allow_any_name,omitempty"`
	AllowCopyExtFromCsr           bool                    `protobuf:"varint,26391201,opt,name=allow_copy_ext_from_csr,proto3" json:"allow_copy_ext_from_csr,omitempty"`
	AllowSubdomains               bool                    `protobuf:"varint,72910686,opt,name=allow_subdomains,proto3" json:"allow_subdomains,omitempty"`
	AllowedDomainsList            []string                `protobuf:"bytes,482100199,rep,name=allowed_domains_list,proto3" json:"allowed_domains_list,omitempty"`
	AllowedExtraExtensions        map[string]*StringArray `protobuf:"bytes,196286118,rep,name=allowed_extra_extensions,proto3" json:"allowed_extra_extensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AllowedUriSans                []string                `protobuf:"bytes,98057158,rep,name=allowed_uri_sans,proto3" json:"allowed_uri_sans,omitempty"`
	BasicConstraintsValidForNonCa bool                    `protobuf:"varint,223768384,opt,name=basic_constraints_valid_for_non_ca,proto3" json:"basic_constraints_valid_for_non_ca,omitempty"`
	CertificateAuthorityMode      string                  `protobuf:"bytes,87562043,opt,name=certificate_authority_mode,proto3" json:"certificate_authority_mode,omitempty"`
	ClientFlag                    bool                    `protobuf:"varint,174101664,opt,name=client_flag,proto3" json:"client_flag,omitempty"`
	CodeSigningFlag               bool                    `protobuf:"varint,164303738,opt,name=code_signing_flag,proto3" json:"code_signing_flag,omitempty"`
	Country                       []string                `protobuf:"bytes,420960151,rep,name=country,proto3" json:"country,omitempty"`
	CreatePrivateCrl              bool                    `protobuf:"varint,43662756,opt,name=create_private_crl,proto3" json:"create_private_crl,omitempty"`
	CreatePublicCrl               bool                    `protobuf:"varint,471631405,opt,name=create_public_crl,proto3" json:"create_public_crl,omitempty"`
	// DestinationPath is the destination to save generated certificates
	DestinationPath  string `protobuf:"bytes,131543480,opt,name=destination_path,proto3" json:"destination_path,omitempty"`
	EnforceHostnames bool   `protobuf:"varint,405130621,opt,name=enforce_hostnames,proto3" json:"enforce_hostnames,omitempty"`
	// ExpirationNotification holds a list of expiration notices that should be sent in case a certificate is about to expire, this value is being propagated to the Certificate resources that are created
	ExpirationEvents []*CertificateExpirationEvent `protobuf:"bytes,290914138,rep,name=expiration_events,proto3" json:"expiration_events,omitempty"`
	GwClusterId      int64                         `protobuf:"varint,109299666,opt,name=gw_cluster_id,proto3" json:"gw_cluster_id,omitempty"`
	// GWClusterURL is required when CAMode is \"public\" and it defines the cluster URL the PKI should be issued from. The GW cluster must have permissions to read associated target's details
	GwClusterUrl string   `protobuf:"bytes,369818845,opt,name=gw_cluster_url,proto3" json:"gw_cluster_url,omitempty"`
	IsCa         bool     `protobuf:"varint,100490131,opt,name=is_ca,proto3" json:"is_ca,omitempty"`
	KeyBits      int64    `protobuf:"varint,500589286,opt,name=key_bits,proto3" json:"key_bits,omitempty"`
	KeyType      string   `protobuf:"bytes,501140762,opt,name=key_type,proto3" json:"key_type,omitempty"`
	KeyUsageList []string `protobuf:"bytes,62677412,rep,name=key_usage_list,proto3" json:"key_usage_list,omitempty"`
	Locality     []string `protobuf:"bytes,290192742,rep,name=locality,proto3" json:"locality,omitempty"`
	// A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
	NotBeforeDuration    int64    `protobuf:"varint,87672600,opt,name=not_before_duration,proto3" json:"not_before_duration,omitempty"`
	OrganizationList     []string `protobuf:"bytes,314850263,rep,name=organization_list,proto3" json:"organization_list,omitempty"`
	OrganizationUnitList []string `protobuf:"bytes,258418286,rep,name=organization_unit_list,proto3" json:"organization_unit_list,omitempty"`
	PostalCode           []string `protobuf:"bytes,442650402,rep,name=postal_code,proto3" json:"postal_code,omitempty"`
	// ProtectGeneratedCertificates dictates whether the created certificates should be protected from deletion
	ProtectGeneratedCertificates bool     `protobuf:"varint,45535708,opt,name=protect_generated_certificates,proto3" json:"protect_generated_certificates,omitempty"`
	Province                     []string `protobuf:"bytes,450614481,rep,name=province,proto3" json:"province,omitempty"`
	RequireCn                    bool     `protobuf:"varint,150256005,opt,name=require_cn,proto3" json:"require_cn,omitempty"`
	ServerFlag                   bool     `protobuf:"varint,222127385,opt,name=server_flag,proto3" json:"server_flag,omitempty"`
	StreetAddress                []string `protobuf:"bytes,310779979,rep,name=street_address,proto3" json:"street_address,omitempty"`
}

func (x *PkiCertificateIssueDetails) Reset() {
	*x = PkiCertificateIssueDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_pki_certificate_issue_details_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PkiCertificateIssueDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PkiCertificateIssueDetails) ProtoMessage() {}

func (x *PkiCertificateIssueDetails) ProtoReflect() protoreflect.Message {
	mi := &file_models_pki_certificate_issue_details_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PkiCertificateIssueDetails.ProtoReflect.Descriptor instead.
func (*PkiCertificateIssueDetails) Descriptor() ([]byte, []int) {
	return file_models_pki_certificate_issue_details_proto_rawDescGZIP(), []int{0}
}

func (x *PkiCertificateIssueDetails) GetAllowAnyName() bool {
	if x != nil {
		return x.AllowAnyName
	}
	return false
}

func (x *PkiCertificateIssueDetails) GetAllowCopyExtFromCsr() bool {
	if x != nil {
		return x.AllowCopyExtFromCsr
	}
	return false
}

func (x *PkiCertificateIssueDetails) GetAllowSubdomains() bool {
	if x != nil {
		return x.AllowSubdomains
	}
	return false
}

func (x *PkiCertificateIssueDetails) GetAllowedDomainsList() []string {
	if x != nil {
		return x.AllowedDomainsList
	}
	return nil
}

func (x *PkiCertificateIssueDetails) GetAllowedExtraExtensions() map[string]*StringArray {
	if x != nil {
		return x.AllowedExtraExtensions
	}
	return nil
}

func (x *PkiCertificateIssueDetails) GetAllowedUriSans() []string {
	if x != nil {
		return x.AllowedUriSans
	}
	return nil
}

func (x *PkiCertificateIssueDetails) GetBasicConstraintsValidForNonCa() bool {
	if x != nil {
		return x.BasicConstraintsValidForNonCa
	}
	return false
}

func (x *PkiCertificateIssueDetails) GetCertificateAuthorityMode() string {
	if x != nil {
		return x.CertificateAuthorityMode
	}
	return ""
}

func (x *PkiCertificateIssueDetails) GetClientFlag() bool {
	if x != nil {
		return x.ClientFlag
	}
	return false
}

func (x *PkiCertificateIssueDetails) GetCodeSigningFlag() bool {
	if x != nil {
		return x.CodeSigningFlag
	}
	return false
}

func (x *PkiCertificateIssueDetails) GetCountry() []string {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *PkiCertificateIssueDetails) GetCreatePrivateCrl() bool {
	if x != nil {
		return x.CreatePrivateCrl
	}
	return false
}

func (x *PkiCertificateIssueDetails) GetCreatePublicCrl() bool {
	if x != nil {
		return x.CreatePublicCrl
	}
	return false
}

func (x *PkiCertificateIssueDetails) GetDestinationPath() string {
	if x != nil {
		return x.DestinationPath
	}
	return ""
}

func (x *PkiCertificateIssueDetails) GetEnforceHostnames() bool {
	if x != nil {
		return x.EnforceHostnames
	}
	return false
}

func (x *PkiCertificateIssueDetails) GetExpirationEvents() []*CertificateExpirationEvent {
	if x != nil {
		return x.ExpirationEvents
	}
	return nil
}

func (x *PkiCertificateIssueDetails) GetGwClusterId() int64 {
	if x != nil {
		return x.GwClusterId
	}
	return 0
}

func (x *PkiCertificateIssueDetails) GetGwClusterUrl() string {
	if x != nil {
		return x.GwClusterUrl
	}
	return ""
}

func (x *PkiCertificateIssueDetails) GetIsCa() bool {
	if x != nil {
		return x.IsCa
	}
	return false
}

func (x *PkiCertificateIssueDetails) GetKeyBits() int64 {
	if x != nil {
		return x.KeyBits
	}
	return 0
}

func (x *PkiCertificateIssueDetails) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *PkiCertificateIssueDetails) GetKeyUsageList() []string {
	if x != nil {
		return x.KeyUsageList
	}
	return nil
}

func (x *PkiCertificateIssueDetails) GetLocality() []string {
	if x != nil {
		return x.Locality
	}
	return nil
}

func (x *PkiCertificateIssueDetails) GetNotBeforeDuration() int64 {
	if x != nil {
		return x.NotBeforeDuration
	}
	return 0
}

func (x *PkiCertificateIssueDetails) GetOrganizationList() []string {
	if x != nil {
		return x.OrganizationList
	}
	return nil
}

func (x *PkiCertificateIssueDetails) GetOrganizationUnitList() []string {
	if x != nil {
		return x.OrganizationUnitList
	}
	return nil
}

func (x *PkiCertificateIssueDetails) GetPostalCode() []string {
	if x != nil {
		return x.PostalCode
	}
	return nil
}

func (x *PkiCertificateIssueDetails) GetProtectGeneratedCertificates() bool {
	if x != nil {
		return x.ProtectGeneratedCertificates
	}
	return false
}

func (x *PkiCertificateIssueDetails) GetProvince() []string {
	if x != nil {
		return x.Province
	}
	return nil
}

func (x *PkiCertificateIssueDetails) GetRequireCn() bool {
	if x != nil {
		return x.RequireCn
	}
	return false
}

func (x *PkiCertificateIssueDetails) GetServerFlag() bool {
	if x != nil {
		return x.ServerFlag
	}
	return false
}

func (x *PkiCertificateIssueDetails) GetStreetAddress() []string {
	if x != nil {
		return x.StreetAddress
	}
	return nil
}

var File_models_pki_certificate_issue_details_proto protoreflect.FileDescriptor

var file_models_pki_certificate_issue_details_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x70, 0x6b, 0x69, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x6b,
	0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x1a, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd6, 0x0d, 0x0a, 0x1a, 0x50, 0x6b, 0x69, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0xcf, 0x85, 0x8f, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x73, 0x72, 0x18, 0xa1, 0xe5, 0xca, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x65, 0x78,
	0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x73, 0x72, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0xde,
	0x8e, 0xe2, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x14, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0xe7, 0x87, 0xf1, 0xe5, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x84, 0x01, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa6,
	0xad, 0xcc, 0x5d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6b, 0x69, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x73, 0x61, 0x6e, 0x73, 0x18, 0xc6, 0xf7, 0xe0,
	0x2e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x75,
	0x72, 0x69, 0x5f, 0x73, 0x61, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x22, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x18, 0xc0, 0xde,
	0xd9, 0x6a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x12, 0x41, 0x0a, 0x1a, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xbb, 0xae, 0xe0, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0xa0, 0xa9, 0x82,
	0x53, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0xfa, 0xa6, 0xac, 0x4e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x97,
	0xaf, 0xdd, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x31, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x6c, 0x18, 0xa4, 0xfb, 0xe8, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x63, 0x72, 0x6c, 0x18, 0xad, 0x8c, 0xf2, 0xe0, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x63, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0xb8, 0xe3, 0xdc, 0x3e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x11, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xfd, 0x9a, 0x97, 0xc1, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xda, 0xfe, 0xdb,
	0x8a, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0d, 0x67, 0x77, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0xd2, 0x8f, 0x8f, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x67, 0x77, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x0e, 0x67, 0x77, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0xdd, 0xf9, 0xab, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x77, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x05, 0x69, 0x73, 0x5f,
	0x63, 0x61, 0x18, 0x93, 0xb7, 0xf5, 0x2f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x5f,
	0x63, 0x61, 0x12, 0x1e, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0xe6,
	0xc5, 0xd9, 0xee, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x69,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x9a,
	0x9a, 0xfb, 0xee, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0xa4, 0xc3, 0xf1, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6b,
	0x65, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xe6, 0xfa, 0xaf, 0x8a, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a,
	0x13, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x98, 0x8e, 0xe7, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e,
	0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xd7, 0xf7, 0x90, 0x96, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xee,
	0xcc, 0x9c, 0x7b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0xa2,
	0x9e, 0x89, 0xd3, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0xdc, 0xa3, 0xdb, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0xd1, 0xa9, 0xef,
	0xd6, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x63, 0x6e, 0x18, 0x85,
	0xf3, 0xd2, 0x47, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x5f, 0x63, 0x6e, 0x12, 0x23, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x99, 0xca, 0xf5, 0x69, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xcb, 0xc0, 0x98, 0x94, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x1a, 0x65, 0x0a, 0x1b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x51, 0x0a, 0x11, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x50, 0x01, 0x5a, 0x0f, 0x2e, 0x3b, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0xaa, 0x02, 0x0d, 0x41, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x47,
	0x72, 0x70, 0x63, 0xca, 0x02, 0x0d, 0x41, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5c, 0x67,
	0x52, 0x50, 0x43, 0xe2, 0x02, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x00,
	0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_models_pki_certificate_issue_details_proto_rawDescOnce sync.Once
	file_models_pki_certificate_issue_details_proto_rawDescData = file_models_pki_certificate_issue_details_proto_rawDesc
)

func file_models_pki_certificate_issue_details_proto_rawDescGZIP() []byte {
	file_models_pki_certificate_issue_details_proto_rawDescOnce.Do(func() {
		file_models_pki_certificate_issue_details_proto_rawDescData = protoimpl.X.CompressGZIP(file_models_pki_certificate_issue_details_proto_rawDescData)
	})
	return file_models_pki_certificate_issue_details_proto_rawDescData
}

var file_models_pki_certificate_issue_details_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_models_pki_certificate_issue_details_proto_goTypes = []any{
	(*PkiCertificateIssueDetails)(nil), // 0: akeyless_grpc.PkiCertificateIssueDetails
	nil,                                // 1: akeyless_grpc.PkiCertificateIssueDetails.AllowedExtraExtensionsEntry
	(*CertificateExpirationEvent)(nil), // 2: akeyless_grpc.CertificateExpirationEvent
	(*StringArray)(nil),                // 3: akeyless_grpc.StringArray
}
var file_models_pki_certificate_issue_details_proto_depIdxs = []int32{
	1, // 0: akeyless_grpc.PkiCertificateIssueDetails.allowed_extra_extensions:type_name -> akeyless_grpc.PkiCertificateIssueDetails.AllowedExtraExtensionsEntry
	2, // 1: akeyless_grpc.PkiCertificateIssueDetails.expiration_events:type_name -> akeyless_grpc.CertificateExpirationEvent
	3, // 2: akeyless_grpc.PkiCertificateIssueDetails.AllowedExtraExtensionsEntry.value:type_name -> akeyless_grpc.StringArray
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_models_pki_certificate_issue_details_proto_init() }
func file_models_pki_certificate_issue_details_proto_init() {
	if File_models_pki_certificate_issue_details_proto != nil {
		return
	}
	file_models_special_types_proto_init()
	file_models_certificate_expiration_event_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_models_pki_certificate_issue_details_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PkiCertificateIssueDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_models_pki_certificate_issue_details_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_models_pki_certificate_issue_details_proto_goTypes,
		DependencyIndexes: file_models_pki_certificate_issue_details_proto_depIdxs,
		MessageInfos:      file_models_pki_certificate_issue_details_proto_msgTypes,
	}.Build()
	File_models_pki_certificate_issue_details_proto = out.File
	file_models_pki_certificate_issue_details_proto_rawDesc = nil
	file_models_pki_certificate_issue_details_proto_goTypes = nil
	file_models_pki_certificate_issue_details_proto_depIdxs = nil
}
